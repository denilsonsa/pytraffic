<html>
<head>
</head>
<h1> PyTraffic </h1>
<h2> What is it? </h2>
<a
href=http://alpha.uhasselt.be/Research/Algebra/Members/pytraffic/>PyTraffic</a>
is a computer version of the board puzzle Rush Hour invented by
the famous puzzle designer <a href="nobtob.htm">Nob Yoshigahara</a> and commercialized by
<a href=http://www.binaryarts.com/ target=_top>Binary Arts Corporation</a>. The goal is to remove the red car out of the
grid through the slot on the right. To do this you have to slide the
other cars out of the way. PyTraffic is written in the scripting language
Python.
<p> Playing the game on a real board is much more fun than playing it on
the computer (ask my daughter!). So after having used PyTraffic you may
consider buying the real thing. </p>
<h2> Features</h2>
<ul>
  <li> PyTraffic comes with about 19.000 puzzles ranging in difficulty
from "Intermediate" to "Expert". </li> 
<li> In addition it is possible to play
"Trivial" and "Easy" levels which are generated on the fly. These are
suitable for small children. My six year old daughter Sarah routinely
does "Easy" puzzles.  
<li>
PyTraffic has a help facility which is able to find
the best move in every position. It is available through a button on
the toolbar. </li>
<li> PyTraffic comes with several "themes". Some of the themes have a 3D-look.
 Making your own
<a href="themes.htm">themes</a> is not very hard. 
</ul>
<h2> Installation </h2>
The short story:
<ul>
<li> For windows there is a self-extracting installer which includes all
dependencies.
If you have an earlier version of PyTraffic then it is strongly recommended to uninstall
it first.
</li>
</ul>
The long story is as follows. PyTraffic has the following dependencies:
<ul>
<li>
PyTraffic is written in the scripting language Python. Python
is usually installed by default on GNU/Linux distributions. If not,
then it is at least included on the installation media. You may also
grab Python from <a href="http://www.python.org"
target=_top>www.python.org</a>.  
</li>
<li> For its GUI, PyTrafffic uses "pygtk", the Python bindings to the
gtk-toolkit. Again gtk and pygtk are usually installed by default.
</li>
<li> For sound and music PyTraffic uses "SDL_mixer" which is usually installed by default.
On Windows PyTraffic uses the SDL wrapper <a href=http://www.pygame.org/ target=_top>pygame</a>. 
</li>
</ul>
Here are some installation methods if you are not using the monolytic
Windows installer. Remember that you will have to take
care
of the dependencies.
<ul>
 <li>There is an .rpm which works for 
  Fedora 3/4. It puts PyTraffic under the "Games" menu. Alternatively type
"pytraffic" to play. There is an associated "themes" .rpm which
contains additional themes.</li>
<li> PyTraffic is now also available from Dag Wieers' excellent <a href="http://dag.wieers.com/home-made/apt/" target=_top> apt/yum repository</a>. Apt or
yum will resolve all depencies for you.
</li>
  <li>If you have Python, pygame and pygtk then on windows 
you can use a fairly small
 self-extracting installer.
 </li>
  <li> The source distribution contains a .spec file so you can create
your own .rpms (using the command "rpmbuild -ta <.tar.gz archive>").
</li>
  <li>On other Unix/Linux systems you can proceed as follows:   unpack
the source archive, go to the pytraffic directory and execute the command (as root):   
<pre>python setup.py install
</pre>
 This will (hopefully) recompile PyTraffic   and
install it properly. For this you need the development packages for python  and SDL_mixer.   To uninstall delete the directories
/usr/local/share/pytraffic, /usr/local/lib/pytraffic, the shell-script
/usr/local/bin/pytraffic, the menu entry /usr/local/share/applications/pytraffic.desktop and
the icons /usr/local/share/icons/hicolor/*/pytraffic.png. To install in another directory than /usr/local use the prefix
argument: 
<pre>
python setup.py install --prefix=&lt;installation_directory&gt;"
</pre>
</li>
</ul>
<h2> How does the help feature work? </h2>
<ul>
  <li> The help feature is based on an exhaustive search.  For a given
level PyTraffic creates   a graph  of all positions   as well as a
hash table for quick lookup. Then using a   standard algorithm in graph
theory it determines for every node the minimal   distance to one the
leaf nodes, i.e. a node  where the red car has escaped the grid. Using
 this information PyTraffic can easily determine the best move in  
every position. </li>
  <li> PyTraffic uses a precomputed database with about 19.000
interesting   positions. These were generated by searching through ALL
levels and   keeping those which take at least 20 moves to solve.
Generating   this file took about 60 hours on a Dell P600 with 80Mb,
running RH-Linux 6.0. Of course for this to be possible   examining a
single level had to be very fast. By applying various   optimizations
to the algorithm outlined in the previous paragraph the   computer could
solve a    level in (on average) 0.03 seconds. </li>
<li>If you want more information on how PyTraffic stores levels you
can look <a href=levels.htm>here</a>.
</li>
</ul>
<h2> Notes </h2>
<ul>
  <li> To reset the state of the program, delete the config file
~/.pytraffic (the meaning of ~ is system dependent: it is the user's
home directory  on Unix). </li>
  <li> If you have solved a level and you are curious what the best
solution would have been, push the Restart button and then repeatedly
push the Hint button until the level is solved again (or start demo mode). </li>
<li> If your are on GNU/Linux and experience sound problems you may want
to read <a href=sound.htm>this</a>.
</li>
</ul>
<h2> Acknowledgement </h2>
<ul><li>
 PyTraffic was inspired by <a href=http://alumni.imsa.edu/~vader21/gtraffic/ target=_top>Gtraffic</a>, a 
Gnome version of Rush Hour, and supersedes
<a href=http://alpha.uhasselt.be/Research/Algebra/Members/Ttraffic/ttraffic.html target=_top>TTraffic</a> which was a Tcl/Tk
version of Rush Hour. 
</li>
  <li> Out of principle I used mostly free tools for the creation of  
PyTraffic. Thanks go to the creators of <a href="http://www.python.org" target=_top>Python</A>, 
the <a href="http://www.pythonware.com/products/pil/" target=_top>Python   Imaging
Library</a>, <a href="http://www.gtk.org/" target=_top>gtk</a>,
<a href="http://www.pygtk.org/" target=_top>pygtk</a>,
<a href="http://glade.gnome.org/" target=_top>glade/libglade</a>,
<a href="http://www.python.org" target=_top>distutils</a>, <a
href="http://www.swig.org" target=_top>SWIG</a>, <a
href="http://www.gimp.org" target=_top>Gimp</a>, <a
href="http://www.inkscape.org" target=_top>Inkscape</a>, <a
href="http://www.imagemagick.org" target=_top>ImageMagick</a>,
<a href="http://netpbm.sourceforge.net/" target=_top>Netpbm</a>,
<a href="http://www.libsdl.org" target=_top>SDL</a>,  
<a href="http://www.pygame.org" target=_top>pygame</a>,
<a href="http://www.vorbis.com" target=_top>Ogg Vorbis</a>,
<a href="http://audacity.sourceforge.net" target=_top>Audacity</a>,
 the <a href="http://www.linux.org" target=_top>Gnu/Linux</a> 
operating system,
 the <a href="http://www.mingw.org" target=_top>Mingw/gcc-compiler</a>, 
the <a href="http://www.cygwin.com/"target=_top >Cygwin environment</a>,  
the <a href="http://www.jrsoftware.org/isinfo.php"target=_top >Inno Setup program</a> and
the <a href="http://py2exe.sourceforge.net/" target=_top>py2exe</a>
executable generator on windows. </li>
<li> For the creation of the 3D-themes I used 
<a href="http://www.povray.org" taget=_top>POV-Ray</a>. 
POV-Ray is a very powerful,  cross-platform ray tracer which however is currently not
 <a href="http://www.gnu.org/philosophy/free-sw.html" target=_top>free software</a> nor 
<a href="http://www.opensource.org" target=_top>open source</a>. The current developers
cannot change this since not all the original developers can be contacted. However they
have repeatedly indicated that the next version of POV-Ray (4.0) will use a more liberal license.
</li>
  <li> The subroutine 'gethomedir' was   taken from the <a href="http://www.oberhumer.com/opensource/pysol/" target=_top>PySol</a>
distribution by Markus Oberhumer.</li>
<li>
The sound track is "Ranger Song" which was licensed under the GPL by
its author <a href=mailto:nightbeat@traxinspace.com>Carl Larsson</a> (aka Nightbeat). I took it from the PySol
distribution. 
</li> 
  <li>The animation routine was contributed by <a href="mailto:jessw@netwood.net">Jesse Weinstein</a>.<br>
  </li>
  <li> Thanks to the people of <a
 href="http://www.lib.utexas.edu/Libs/PCL/Map_collection/Map_collection.html" target=_top >http://www.lib.utexas.edu/Libs/PCL/Map_collection/Map_collection.html</a>
for making copyright free maps available. I used one of those to  
produce the background for the Fancy2D theme.</li>
<li> Finally thanks to  <a
 href=http://www.google.com target=_top>Google</a>
for providing us with <a
 href=http://www.google.be/imghp?hl=en&tab=wi&q= target=_top>Google
 Images</a>. 
</li> 
</ul>
<h2> Bugs </h2>
PyTraffic has no known bugs but there are some 'issues'
:
<ul>
  <li> The hint feature takes about 15Mb of memory. The high memory demand   is
due to the fact that PyTraffic currently stores all edges of the   move
graph in a table instead of generating them dynamically. </li>
  <li> The hint feature only works on Windows and Unix since I have no
access   to a Mac and I have no idea how C-extensions work there. In fact I have not tested PyTraffic on a Mac so it could be that it does not work at all!</li>
<li> There are no levels included containing cars and trucks in the same row or
column, although some of these appear to be interesting.
  <li> On older systems PyTraffic takes a rather long time to start up.
This is because the cars are PNG-images which have to be loaded first.
 </li>
  </li>
</ul>
<h2>License </h2>
PyTraffic is covered by the GNU General Public License.
<h2>Extras</h2>
<ul>
<li> There are many Java versions of Rush Hour.
See for example  <a href=http://www.igoweb.org/~wms/rushHour
target=_top>here</a>.
</li>
<li>
<a href=http://www.theiling.de/projects/rushhour.html target=_top>Rush Hour Solver</a> is another program that can solve Rush Hour levels.
</li>
<li>
Here is  <a href=http://www.ics.uci.edu/~eppstein/cgt/hard.html
target=_top>nice article</a> about the combinatorial complexity of traditional
games.
</li>
</ul>
</body>
</html>
